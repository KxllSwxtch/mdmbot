import telebot
import os
import re
import requests
import locale
import logging
import urllib.parse
import json
import phonenumbers


from amocrm.v2 import Lead, custom_field, tokens, Contact
from io import BytesIO
from telebot import types
from dotenv import load_dotenv
from urllib.parse import urlparse, parse_qs
from utils import (
    generate_encar_photo_url,
    clean_number,
    get_customs_fees,
    calculate_age,
    format_number,
)


CALCULATE_CAR_TEXT = "–†–∞—Å—á—ë—Ç –ø–æ —Å—Å—ã–ª–∫–µ"
DEALER_COMMISSION = 0.02  # 2%

PROXY_URL = "http://B01vby:GBno0x@45.118.250.2:8000"
proxies = {"http": PROXY_URL, "https": PROXY_URL}


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î
DATABASE_URL = "postgres://uea5qru3fhjlj:p44343a46d4f1882a5ba2413935c9b9f0c284e6e759a34cf9569444d16832d4fe@c97r84s7psuajm.cluster-czrs8kj4isg7.us-east-1.rds.amazonaws.com:5432/d9pr93olpfl9bj"


# Configure logging
logging.basicConfig(
    filename="bot.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)

# Load keys from .env file
load_dotenv()
bot_token = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(bot_token)

# Set locale for number formatting
locale.setlocale(locale.LC_ALL, "en_US.UTF-8")

# Storage for the last error message ID
last_error_message_id = {}

# global variables
car_data = {}
car_id_external = ""
total_car_price = 0
usdt_krw_rate = 0
usdt_rub_rate = 0
usd_rate = 0
users = set()

admins = []
CHANNEL_USERNAME = "@mdmgroupkorea"  # –Æ–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞

car_month = None
car_year = None

vehicle_id = None
vehicle_no = None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}


def is_valid_phone(phone):
    try:
        parsed = phonenumbers.parse(phone, None)
        return phonenumbers.is_possible_number(parsed) and phonenumbers.is_valid_number(
            parsed
        )
    except phonenumbers.NumberParseException:
        return False


def print_message(message):
    print("\n\n##############")
    print(f"{message}")
    print("##############\n\n")
    return None


def is_subscribed(user_id):
    try:
        chat_member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return chat_member.status in ["member", "administrator", "creator"]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
def set_bot_commands():
    commands = [
        types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand("cbr", "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç"),
        # types.BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
    ]
    bot.set_my_commands(commands)


def get_usdt_to_rub_rate():
    global usdt_rub_rate

    url = "https://api.coinbase.com/v2/prices/USDT-RUB/spot"

    try:
        response = requests.get(url)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω—ã–π (–∫–æ–¥ 200)
        data = response.json()

        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USDT –∫ —Ä—É–±–ª—é –∏–∑ –æ—Ç–≤–µ—Ç–∞
        usdt_rub_rate = float(data["data"]["amount"])

        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º 2 —Ä—É–±–ª—è
        usdt_rub_rate = round(usdt_rub_rate, 2) + 2

        # –í—ã—á–∏—Å–ª—è–µ–º –∫—É—Ä—Å —Ä—É–±–ª—è –∫ –≤–æ–Ω–µ —á–µ—Ä–µ–∑ –∫—É—Ä—Å USDT

        print_message(f"–ö—É—Ä—Å USDT-RUB: {usdt_rub_rate} ‚ÇΩ")

    except requests.RequestException as e:
        print_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —Å API
def get_currency_rates():
    global usd_rate, usdt_krw_rate

    print_message("–ü–û–õ–£–ß–ê–ï–ú –ö–£–†–° USDT/KRW")

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USDT/KRW —Å Naver
    try:
        usdt_krw_url = "https://search.naver.com/search.naver?sm=tab_hty.top&where=nexearch&ssc=tab.nx.all&query=USDT"
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
        }
        naver_response = requests.get(usdt_krw_url, headers=headers)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º BeautifulSoup –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML
        from bs4 import BeautifulSoup

        soup = BeautifulSoup(naver_response.text, "html.parser")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∏–∑ strong.price
        price_element = soup.select_one("strong.price em")
        if price_element:
            krw_rate_text = price_element.text.strip().replace(",", "")
            krw = float(krw_rate_text) - 10

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            usd_rate = 1.0  # USDT –∫—É—Ä—Å –∫ –¥–æ–ª–ª–∞—Ä—É 1:1
            usdt_krw_rate = krw

            rates_text = f"USDT/KRW: <b>{krw:.2f} ‚Ç©</b>"
            return rates_text
        else:
            print_message("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å USDT/KRW —Å Naver")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å USDT/KRW"
    except Exception as e:
        print_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ USDT/KRW: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cbr
@bot.message_handler(commands=["cbr"])
def cbr_command(message):
    global usdt_rub_rate

    user_id = message.from_user.id

    if not is_subscribed(user_id):
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"
            )
        )

        bot.send_message(
            message.chat.id,
            f"üö´ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
            reply_markup=keyboard,
        )
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω

    try:
        rates_text = get_currency_rates()

        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USDT/RUB
        try:
            get_usdt_to_rub_rate()
            rates_text += f"\nUSDT/RUB: <b>{usdt_rub_rate:.2f} ‚ÇΩ</b>"
        except Exception as e:
            print_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ USDT/RUB: {e}")
            rates_text += "\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å USDT/RUB"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è", callback_data="calculate_another"
            )
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(
            message.chat.id, rates_text, reply_markup=keyboard, parse_mode="HTML"
        )
    except Exception as e:
        bot.send_message(
            message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")


# Main menu creation function
def main_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboard.add(
        types.KeyboardButton(CALCULATE_CAR_TEXT), types.KeyboardButton("–†—É—á–Ω–æ–π —Ä–∞—Å—á—ë—Ç")
    )
    keyboard.add(
        types.KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É"),
        types.KeyboardButton("–û –Ω–∞—Å"),
        types.KeyboardButton("Telegram-–∫–∞–Ω–∞–ª"),
        types.KeyboardButton("Instagram"),
        types.KeyboardButton("Tik-Tok"),
    )
    return keyboard


@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def check_subscription(call):
    user_id = call.from_user.id

    if is_subscribed(user_id):
        bot.answer_callback_query(call.id, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!")
        bot.send_message(
            call.message.chat.id,
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
            reply_markup=main_menu(),
        )
    else:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"
            )
        )

        bot.send_message(
            call.message.chat.id,
            "üö´ –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.",
            reply_markup=keyboard,
        )


# Start command handler
@bot.message_handler(commands=["start"])
def send_welcome(message):
    user_id = message.from_user.id

    if not is_subscribed(user_id):
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"
            )
        )

        bot.send_message(
            message.chat.id,
            f"üö´ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
            reply_markup=keyboard,
        )
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω

    get_currency_rates()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
    video_url = "https://res.cloudinary.com/dazj4gjli/video/upload/v1744443895/IMG_9266_guzqka.mp4"
    bot.send_video(message.chat.id, video_url)

    user_first_name = message.from_user.first_name
    welcome_message = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_first_name}!\n\n"
        "–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ MDM GROUP. –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–≥–æ—Å—è –≤–∞–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ –Æ–∂–Ω–æ–π –ö–æ—Ä–µ–∏ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ."
    )
    bot.send_message(message.chat.id, welcome_message, reply_markup=main_menu())


# Error handling function
def send_error_message(message, error_text):
    global last_error_message_id

    # Remove previous error message if it exists
    if last_error_message_id.get(message.chat.id):
        try:
            bot.delete_message(message.chat.id, last_error_message_id[message.chat.id])
        except Exception as e:
            logging.error(f"Error deleting message: {e}")

    # Send new error message and store its ID
    error_message = bot.reply_to(message, error_text, reply_markup=main_menu())
    last_error_message_id[message.chat.id] = error_message.id
    logging.error(f"Error sent to user {message.chat.id}: {error_text}")


def get_car_info(url):
    global car_id_external, vehicle_no, vehicle_id, car_year, car_month

    # driver = create_driver()

    car_id_match = re.findall(r"\d+", url)
    car_id = car_id_match[0]
    car_id_external = car_id

    url = f"https://api.encar.com/v1/readside/vehicle/{car_id}"

    headers = {
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
        "Referer": "http://www.encar.com/",
        "Cache-Control": "max-age=0",
        "Connection": "keep-alive",
    }

    response = requests.get(url, headers=headers).json()

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
    car_make = response["category"]["manufacturerEnglishName"]  # –ú–∞—Ä–∫–∞
    car_model = response["category"]["modelGroupEnglishName"]  # –ú–æ–¥–µ–ª—å
    car_trim = response["category"]["gradeDetailEnglishName"] or ""  # –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è

    car_title = f"{car_make} {car_model} {car_trim}"  # –ó–∞–≥–æ–ª–æ–≤–æ–∫

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é
    car_price = str(response["advertisement"]["price"])
    car_date = response["category"]["yearMonth"]
    year = car_date[2:4]
    month = car_date[4:]
    car_year = year
    car_month = month

    # –ü—Ä–æ–±–µ–≥ (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
    mileage = response["spec"]["mileage"]
    formatted_mileage = f"{mileage:,} –∫–º"

    # –¢–∏–ø –ö–ü–ü
    transmission = response["spec"]["transmissionName"]
    formatted_transmission = "–ê–≤—Ç–æ–º–∞—Ç" if "Ïò§ÌÜ†" in transmission else "–ú–µ—Ö–∞–Ω–∏–∫–∞"

    car_engine_displacement = str(response["spec"]["displacement"])
    car_type = response["spec"]["bodyName"]

    # –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10)
    car_photos = [
        generate_encar_photo_url(photo["path"]) for photo in response["photos"][:10]
    ]
    car_photos = [url for url in car_photos if url]

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    vehicle_no = response["vehicleNo"]
    vehicle_id = response["vehicleId"]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    formatted_car_date = f"01{month}{year}"
    formatted_car_type = "crossover" if car_type == "SUV" else "sedan"

    print_message(
        f"ID: {car_id}\nType: {formatted_car_type}\nDate: {formatted_car_date}\nCar Engine Displacement: {car_engine_displacement}\nPrice: {car_price} KRW"
    )

    return [
        car_price,
        car_engine_displacement,
        formatted_car_date,
        car_title,
        formatted_mileage,
        formatted_transmission,
        car_photos,
        year,
        month,
    ]


# Function to calculate the total cost
def calculate_cost(link, message):
    global car_data, car_id_external, car_month, car_year, usdt_krw_rate, usdt_rub_rate, usd_rate

    print_message("–ó–ê–ü–†–û–° –ù–ê –†–ê–°–ß–Å–¢ –ê–í–¢–û–ú–û–ë–ò–õ–Ø")

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç
    get_usdt_to_rub_rate()
    get_currency_rates()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    processing_message = bot.send_message(
        message.chat.id, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚è≥"
    )

    car_id = None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
    if "fem.encar.com" in link:
        car_id_match = re.findall(r"\d+", link)
        if car_id_match:
            car_id = car_id_match[0]  # Use the first match of digits
            car_id_external = car_id
            link = f"https://fem.encar.com/cars/detail/{car_id}"
        else:
            send_error_message(message, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å carid –∏–∑ —Å—Å—ã–ª–∫–∏.")
            return
    else:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º carid —Å URL encar
        parsed_url = urlparse(link)
        query_params = parse_qs(parsed_url.query)
        car_id = query_params.get("carid", [None])[0]

    result = get_car_info(link)
    (
        car_price,
        car_engine_displacement,
        formatted_car_date,
        car_title,
        formatted_mileage,
        formatted_transmission,
        car_photos,
        year,
        month,
    ) = result

    if not car_price and car_engine_displacement and formatted_car_date:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
                callback_data="add_crm_deal",
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                callback_data="calculate_another",
            )
        )
        bot.send_message(
            message.chat.id, "–û—à–∏–±–∫–∞", parse_mode="Markdown", reply_markup=keyboard
        )
        bot.delete_message(message.chat.id, processing_message.message_id)
        return

    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤–∞—è —Å—Å—ã–ª–∫–∞
    if car_price and car_engine_displacement and formatted_car_date:
        car_engine_displacement = int(car_engine_displacement)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        formatted_car_year = f"20{car_year}"
        engine_volume_formatted = f"{format_number(car_engine_displacement)} cc"
        age = calculate_age(int(formatted_car_year), car_month)

        age_formatted = (
            "–¥–æ 3 –ª–µ—Ç"
            if age == "0-3"
            else (
                "–æ—Ç 3 –¥–æ 5 –ª–µ—Ç"
                if age == "3-5"
                else "–æ—Ç 5 –¥–æ 7 –ª–µ—Ç" if age == "5-7" else "–æ—Ç 7 –ª–µ—Ç"
            )
        )

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ –≤ —Ä—É–±–ª–∏
        price_krw = int(car_price) * 10000
        price_usdt = int(price_krw) / usdt_krw_rate
        price_rub = int(price_usdt) * usdt_rub_rate

        response = get_customs_fees(
            car_engine_displacement,
            price_krw,
            int(f"20{car_year}"),
            car_month,
            engine_type=1,
        )

        # –¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä
        customs_fee = clean_number(response["sbor"])
        customs_duty = clean_number(response["tax"])
        recycling_fee = clean_number(response["util"])

        # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ä—É–±–ª—è—Ö
        total_cost = (
            price_rub  # –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ä—É–±–ª—è—Ö
            + customs_fee  # –¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä
            + customs_duty  # –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞
            + recycling_fee  # –£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä
            + 100000  # –§–†–ê–•–¢
            + 100000  # –ë—Ä–æ–∫–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏
        )

        car_data["freight_rub"] = 100000
        car_data["freight_usdt"] = 1000

        car_data["broker_rub"] = 100000
        car_data["broker_usdt"] = 100000 / usdt_rub_rate

        car_data["customs_fee_rub"] = customs_fee
        car_data["customs_fee_usdt"] = customs_fee / usdt_rub_rate

        car_data["customs_duty_rub"] = customs_duty
        car_data["customs_duty_usdt"] = customs_duty / usdt_rub_rate

        car_data["util_fee_rub"] = recycling_fee
        car_data["util_fee_usdt"] = recycling_fee / usdt_rub_rate

        preview_link = f"https://fem.encar.com/cars/detail/{car_id}"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_message = (
            f"üöó <b>{car_title}</b>\n\n"
            f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {age_formatted} (–¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {month}/{year})\n"
            f"üõ£Ô∏è –ü—Ä–æ–±–µ–≥: {formatted_mileage}\n"
            f"üîß –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {engine_volume_formatted}\n"
            f"‚öôÔ∏è –ö–ü–ü: {formatted_transmission}\n\n"
            f"üí± –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç:\nUSDT/KRW: <b>‚Ç©{usdt_krw_rate:.2f}</b>\nUSDT/RUB: <b>{usdt_rub_rate:.2f} ‚ÇΩ</b>\n\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b>\n"
            f"‚Ä¢ –¶–µ–Ω–∞ –∞–≤—Ç–æ:\n‚Ç©<b>{format_number(price_krw)}</b> | <b>{format_number(price_rub)}</b> ‚ÇΩ\n\n"
            f"‚Ä¢ –§–†–ê–•–¢:\n<b>{format_number(car_data['freight_rub'])}</b> ‚ÇΩ\n\n"
            f"‚Ä¢ –ë—Ä–æ–∫–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏:\n<b>{format_number(car_data['broker_rub'])}</b> ‚ÇΩ\n\n"
            f"üìù <b>–¢–∞–º–æ–∂–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:</b>\n"
            f"‚Ä¢ –¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä:\n<b>{format_number(car_data['customs_fee_rub'])}</b> ‚ÇΩ\n\n"
            f"‚Ä¢ –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞:\n<b>{format_number(car_data['customs_duty_rub'])}</b> ‚ÇΩ\n\n"
            f"‚Ä¢ –£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä:\n<b>{format_number(car_data['util_fee_rub'])}</b> ‚ÇΩ\n\n"
            f"üíµ <b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥ –∫–ª—é—á –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞:</b>\n"
            f"<b>{format_number(total_cost)} ‚ÇΩ</b>\n\n"
            f"üîó <a href='{preview_link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å</a>\n\n"
            f"üë®‚Äçüíº üá∞üá∑ +82 10 2382 4808 <a href='https://wa.me/821023824808'>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä</a>\n"
            f"üë®‚Äçüíº üá∞üá∑ +82 10 7928 8398 <a href='https://wa.me/821079288398'>–°–µ—Ä–≥–µ–π</a>\n"
            f"üë®‚Äçüíº üá∞üá∑ +82 10 2235 4808 <a href='https://wa.me/821022354808'>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä</a>\n"
            f"üì¢ <a href='https://t.me/mdmgroupkorea'>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª</a>\n"
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = types.InlineKeyboardMarkup()
        # keyboard.add(
        #     types.InlineKeyboardButton("–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á—ë—Ç–∞", callback_data="detail")
        # )
        # keyboard.add(
        #     types.InlineKeyboardButton(
        #         "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
        #         callback_data="",
        #     )
        # )
        keyboard.add(
            types.InlineKeyboardButton(
                "–í—ã–ø–ª–∞—Ç—ã –ø–æ –î–¢–ü",
                callback_data="technical_report",
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
                callback_data="add_crm_deal",
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "–†–∞—Å—á—ë—Ç –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                callback_data="calculate_another",
            )
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        media_group = []
        for photo_url in sorted(car_photos):
            try:
                response = requests.get(photo_url)
                if response.status_code == 200:
                    photo = BytesIO(response.content)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ –ø–∞–º—è—Ç—å
                    media_group.append(
                        types.InputMediaPhoto(photo)
                    )  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫

                    # –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–∏ 10 —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
                    if len(media_group) == 10:
                        bot.send_media_group(message.chat.id, media_group)
                        media_group.clear()  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –≥—Ä—É–ø–ø—ã
                else:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {photo_url} - {response.status_code}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ {photo_url}: {e}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ 10
        if media_group:
            bot.send_media_group(message.chat.id, media_group)

        bot.send_message(
            message.chat.id,
            result_message,
            parse_mode="HTML",
            reply_markup=keyboard,
        )

        bot.delete_message(
            message.chat.id, processing_message.message_id
        )  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É

    else:
        send_error_message(
            message,
            "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        )
        bot.delete_message(message.chat.id, processing_message.message_id)


# Function to get insurance total
def get_insurance_total():
    global car_id_external, vehicle_no, vehicle_id

    print_message("[–ó–ê–ü–†–û–°] –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –û–¢–ß√ã–¢ –û–ë –ê–í–¢–û–ú–û–ë–ò–õ–ï")

    formatted_vehicle_no = urllib.parse.quote(str(vehicle_no).strip())
    url = f"https://api.encar.com/v1/readside/record/vehicle/{str(vehicle_id)}/open?vehicleNo={formatted_vehicle_no}"

    try:
        headers = {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
            "Referer": "http://www.encar.com/",
            "Cache-Control": "max-age=0",
            "Connection": "keep-alive",
        }

        response = requests.get(url, headers)
        json_response = response.json()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        damage_to_my_car = json_response["myAccidentCost"]
        damage_to_other_car = json_response["otherAccidentCost"]

        print(
            f"–í—ã–ø–ª–∞—Ç—ã –ø–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é: {format_number(damage_to_my_car)}"
        )
        print(f"–í—ã–ø–ª–∞—Ç—ã –¥—Ä—É–≥–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é: {format_number(damage_to_other_car)}")

        return [format_number(damage_to_my_car), format_number(damage_to_other_car)]

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return ["", ""]


# Callback query handler
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    global car_data, car_id_external, usd_rate, user_data

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ - –≤—ã–±–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞
    if call.data.startswith("manual_age_"):
        bot.answer_callback_query(call.id)
        age = call.data.replace("manual_age_", "")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if call.from_user.id not in user_data:
            user_data[call.from_user.id] = {}
        user_data[call.from_user.id]["manual_age"] = age

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è
        msg = bot.send_message(
            call.message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ –∫—É–±–∏—á–µ—Å–∫–∏—Ö —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2000):",
        )
        bot.register_next_step_handler(msg, process_manual_engine_volume)

    elif call.data == "manual_calculation":
        bot.answer_callback_query(call.id)
        start_manual_calculation(call.message.chat.id)

    elif call.data == "add_crm_deal":
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —É –∫–Ω–æ–ø–∫–∏
        bot.answer_callback_query(call.id, "–ù–∞—á–∏–Ω–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        bot.send_message(
            call.message.chat.id,
            "‚úèÔ∏è –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å\n\n–î–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏ –Ω–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.",
        )

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û
        msg = bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - —Å–±–æ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        user_data[call.from_user.id] = {
            "step": "waiting_name",
            "msg_id": msg.message_id,
        }
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.register_next_step_handler(msg, process_name_step)

    elif call.data.startswith("detail"):
        print_message("[–ó–ê–ü–†–û–°] –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –†–ê–°–ß√ã–¢–ê")

        detail_message = (
            f"<i>–ü–ï–†–í–ê–Ø –ß–ê–°–¢–¨ –û–ü–õ–ê–¢–´</i>:\n\n"
            f"–ê–≥–µ–Ω—Ç—Å–∫–∏–µ —É—Å–ª—É–≥–∏ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É:\n<b>${format_number(car_data['agent_korea_usd'])}</b> | <b>‚Ç©{format_number(car_data['agent_korea_krw'])}</b> | <b>50000 ‚ÇΩ</b>\n\n"
            f"–ó–∞–¥–∞—Ç–æ–∫ (–±—Ä–æ–Ω—å –∞–≤—Ç–æ):\n<b>${format_number(car_data['advance_usd'])}</b> | <b>‚Ç©1,000,000</b> | <b>{format_number(car_data['advance_rub'])} ‚ÇΩ</b>\n\n\n"
            f"<i>–í–¢–û–†–ê–Ø –ß–ê–°–¢–¨ –û–ü–õ–ê–¢–´</i>:\n\n"
            # f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–∑–∞ –≤—ã—á–µ—Ç–æ–º –∑–∞–¥–∞—Ç–∫–∞):\n<b>${format_number(car_data['car_price_usd'])}</b> | <b>‚Ç©{format_number(car_data['car_price_krw'])}</b> | <b>{format_number(car_data['car_price_rub'])} ‚ÇΩ</b>\n\n"
            f"–î–∏–ª–ª–µ—Ä—Å–∫–∏–π —Å–±–æ—Ä:\n<b>${format_number(car_data['dealer_korea_usd'])}</b> | <b>‚Ç©{format_number(car_data['dealer_korea_krw'])}</b> | <b>{format_number(car_data['dealer_korea_rub'])} ‚ÇΩ</b>\n\n"
            f"–î–æ—Å—Ç–∞–≤–∫–∞, —Å–Ω—è—Ç–∏–µ —Å —É—á—ë—Ç–∞, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ:\n<b>${format_number(car_data['delivery_korea_usd'])}</b> | <b>‚Ç©{format_number(car_data['delivery_korea_krw'])}</b> | <b>{format_number(car_data['delivery_korea_rub'])} ‚ÇΩ</b>\n\n"
            f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ –≤ –ø–æ—Ä—Ç:\n<b>${format_number(car_data['transfer_korea_usd'])}</b> | <b>‚Ç©{format_number(car_data['transfer_korea_krw'])}</b> | <b>{format_number(car_data['transfer_korea_rub'])} ‚ÇΩ</b>\n\n"
            f"–§—Ä–∞—Ö—Ç (–ü–∞—Ä–æ–º –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞):\n<b>${format_number(car_data['freight_korea_usd'])}</b> | <b>‚Ç©{format_number(car_data['freight_korea_krw'])}</b> | <b>{format_number(car_data['freight_korea_rub'])} ‚ÇΩ</b>\n\n\n"
            f"<b>–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –ö–æ—Ä–µ–µ</b>:\n<b>${format_number(car_data['korea_total_usd'])}</b> | <b>‚Ç©{format_number(car_data['korea_total_krw'])}</b> | <b>{format_number(car_data['korea_total_rub'])} ‚ÇΩ</b>\n\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è</b>:\n<b>${format_number(car_data['car_price_usd'])}</b> | <b>‚Ç©{format_number(car_data['car_price_krw'])}</b> | <b>{format_number(car_data['car_price_rub'])} ‚ÇΩ</b>\n\n"
            f"<b>–ò—Ç–æ–≥–æ</b>:\n<b>${format_number(car_data['korea_total_plus_car_usd'])}</b> | <b>‚Ç©{format_number(car_data['korea_total_plus_car_krw'])}</b> | <b>{format_number(car_data['korea_total_plus_car_rub'])} ‚ÇΩ</b>\n\n\n"
            f"<i>–†–ê–°–•–û–î–´ –†–û–°–°–ò–Ø</i>:\n\n\n"
            f"–ï–¥–∏–Ω–∞—è —Ç–∞–º–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞:\n<b>${format_number(car_data['customs_duty_usd'])}</b> | <b>‚Ç©{format_number(car_data['customs_duty_krw'])}</b> | <b>{format_number(car_data['customs_duty_rub'])} ‚ÇΩ</b>\n\n"
            f"–¢–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ:\n<b>${format_number(car_data['customs_fee_usd'])}</b> | <b>‚Ç©{format_number(car_data['customs_fee_krw'])}</b> | <b>{format_number(car_data['customs_fee_rub'])} ‚ÇΩ</b>\n\n"
            f"–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä:\n<b>${format_number(car_data['util_fee_usd'])}</b> | <b>‚Ç©{format_number(car_data['util_fee_krw'])}</b> | <b>{format_number(car_data['util_fee_rub'])} ‚ÇΩ</b>\n\n\n"
            f"–ë—Ä–æ–∫–µ—Ä-–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫:\n<b>${format_number(car_data['broker_russia_usd'])}</b> | <b>‚Ç©{format_number(car_data['broker_russia_krw'])}</b> | <b>{format_number(car_data['broker_russia_rub'])} ‚ÇΩ</b>\n\n"
            f"–°–í–•-–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫:\n<b>${format_number(car_data['svh_russia_usd'])}</b> | <b>‚Ç©{format_number(car_data['svh_russia_krw'])}</b> | <b>{format_number(car_data['svh_russia_rub'])} ‚ÇΩ</b>\n\n"
            f"–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è, –°–ë–ö–¢–°, –≠–ü–¢–°:\n<b>${format_number(car_data['lab_russia_usd'])}</b> | <b>‚Ç©{format_number(car_data['lab_russia_krw'])}</b> | <b>{format_number(car_data['lab_russia_rub'])} ‚ÇΩ</b>\n\n"
            f"–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è-–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫:\n<b>${format_number(car_data['perm_registration_russia_usd'])}</b> | <b>‚Ç©{format_number(car_data['perm_registration_russia_krw'])}</b> | <b>{format_number(car_data['perm_registration_russia_rub'])} ‚ÇΩ</b>\n\n"
            f"–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –†–æ—Å—Å–∏–∏: \n<b>${format_number(car_data['russia_total_usd'])}</b> | <b>‚Ç©{format_number(car_data['russia_total_krw'])}</b> | <b>{format_number(car_data['russia_total_rub'])} ‚ÇΩ</b>\n\n\n"
            f"–ò—Ç–æ–≥–æ –ø–æ–¥ –∫–ª—é—á –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ: \n<b>${format_number(car_data['total_cost_usd'])}</b> | <b>‚Ç©{format_number(car_data['total_cost_krw'])}</b> | <b>{format_number(car_data['total_cost_rub'])} ‚ÇΩ</b>\n\n"
            f"<b>–î–æ—Å—Ç–∞–≤–∫—É –¥–æ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ —É—Ç–æ—á–Ω—è–π—Ç–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:</b>\n\n"
            f"üá∞üá∑ +82 10 2382 4808 <a href='https://wa.me/821023824808'>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä</a>\n"
            f"üá∞üá∑ +82 10 7928 8398 <a href='https://wa.me/821079288398'>–°–µ—Ä–≥–µ–π</a>\n"
            f"üá∞üá∑ +82 10 2235 4808 <a href='https://wa.me/821022354808'>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä</a>\n"
        )

        # Inline buttons for further actions
        keyboard = types.InlineKeyboardMarkup()

        if call.data.startswith("detail_manual"):
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another_manual",
                )
            )
        else:
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another",
                )
            )

        keyboard.add(
            types.InlineKeyboardButton(
                "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
                callback_data="add_crm_deal",
            )
        )

        bot.send_message(
            call.message.chat.id,
            detail_message,
            parse_mode="HTML",
            reply_markup=keyboard,
        )

    elif call.data == "technical_report":
        bot.send_message(
            call.message.chat.id,
            "–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –æ—Ç—á—ë—Ç –ø–æ –î–¢–ü. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚è≥",
        )

        # Retrieve insurance information
        insurance_info = get_insurance_total()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏
        if (
            insurance_info is None
            or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" in insurance_info[0]
            or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" in insurance_info[1]
        ):
            error_message = (
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –≤—ã–ø–ª–∞—Ç–∞—Ö. \n\n"
                f'<a href="https://fem.encar.com/cars/report/accident/{car_id_external}">üîó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é –≤—Ä—É—á–Ω—É—é üîó</a>\n\n\n'
                f"<b>–ù–∞–π–¥–∏—Ç–µ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏:</b>\n\n"
                f"Î≥¥ÌóòÏÇ¨Í≥† Ïù¥Î†• (ÎÇ¥Ï∞® ÌîºÌï¥) - –í—ã–ø–ª–∞—Ç—ã –ø–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é\n"
                f"Î≥¥ÌóòÏÇ¨Í≥† Ïù¥Î†• (ÌÉÄÏ∞® Í∞ÄÌï¥) - –í—ã–ø–ª–∞—Ç—ã –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –î–¢–ü"
            )

            # Inline buttons for further actions
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another",
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
                    callback_data="add_crm_deal",
                )
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            bot.send_message(
                call.message.chat.id,
                error_message,
                parse_mode="HTML",
                reply_markup=keyboard,
            )
        else:
            current_car_insurance_payments = (
                "0" if len(insurance_info[0]) == 0 else insurance_info[0]
            )
            other_car_insurance_payments = (
                "0" if len(insurance_info[1]) == 0 else insurance_info[1]
            )

            # Construct the message for the technical report
            tech_report_message = (
                f"–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã –ø–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é: \n<b>{current_car_insurance_payments} ‚Ç©</b>\n\n"
                f"–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –î–¢–ü: \n<b>{other_car_insurance_payments} ‚Ç©</b>\n\n"
                f'<a href="https://fem.encar.com/cars/report/inspect/{car_id_external}">üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ö–µ–º—É –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∫—É–∑–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ üîó</a>'
            )

            # Inline buttons for further actions
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another",
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
                    callback_data="add_crm_deal",
                )
            )

            bot.send_message(
                call.message.chat.id,
                tech_report_message,
                parse_mode="HTML",
                reply_markup=keyboard,
            )

    elif call.data == "calculate_another":
        bot.send_message(
            call.message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–∞–π—Ç–∞ www.encar.com:",
        )


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_message = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
    if user_message == CALCULATE_CAR_TEXT:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–∞–π—Ç–∞ www.encar.com:",
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†—É—á–Ω–æ–π —Ä–∞—Å—á—ë—Ç"
    elif user_message == "–†—É—á–Ω–æ–π —Ä–∞—Å—á—ë—Ç":
        start_manual_calculation(message.chat.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
    elif re.match(r"^https?://(www|fem)\.encar\.com/.*", user_message):
        calculate_cost(user_message, message)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
    elif user_message == "–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É":
        bot.send_message(
            message.chat.id,
            f"–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏:\n"
            f"üá∞üá∑ +82 10 2382 4808 (https://wa.me/821023824808) ¬´–ê–ª–µ–∫—Å–∞–Ω–¥—Ä¬ª\n"
            f"üá∞üá∑ +82 10 7928 8398 (https://wa.me/821079288398) ¬´–°–µ—Ä–≥–µ–π¬ª\n"
            f"üá∞üá∑ +82 10 2235 4808 (https://wa.me/821022354808) ¬´–ê–ª–µ–∫—Å–∞–Ω–¥—Ä¬ª",
        )

    elif user_message == "–û –Ω–∞—Å":
        about_message = "MDM GROUP\n–Æ–∂–Ω–æ–∫–æ—Ä–µ–π—Å–∫–∞—è —ç–∫—Å–ø–æ—Ä—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è.\n–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ –Æ–∂–Ω–æ–π –ö–æ—Ä–µ–∏ –≤ —Å—Ç—Ä–∞–Ω—ã –°–ù–ì.\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ 5 –ª–µ—Ç.\n\n–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?\n‚Ä¢ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏.\n‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É.\n‚Ä¢ –ü–æ–ª–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏.\n\nüí¨ –í–∞—à –ø—É—Ç—å –∫ –Ω–∞–¥–µ–∂–Ω—ã–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å!"
        bot.send_message(message.chat.id, about_message)

    elif user_message == "Telegram-–∫–∞–Ω–∞–ª":
        channel_link = "https://t.me/mdmgroupkorea"
        bot.send_message(
            message.chat.id, f"–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª: {channel_link}"
        )

    elif user_message == "Instagram":
        instagram_link = "https://www.instagram.com/mdm_group.kr/"
        bot.send_message(
            message.chat.id,
            f"–ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à Instagram: {instagram_link}",
        )

    elif user_message == "Tik-Tok":
        tiktok_link = "https://www.tiktok.com/@mdm_group"
        bot.send_message(
            message.chat.id,
            f"–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–µ–∂–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –Ω–∞ –Ω–∞—à–µ–º TikTok: {tiktok_link}",
        )

    else:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Å–∞–π—Ç–∞ www.encar.com –∏–ª–∏ fem.encar.com.",
        )


def process_name_step(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    if user_id in user_data:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
        user_data[user_id]["name"] = message.text
        user_data[user_id]["step"] = "waiting_phone"

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        msg = bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        bot.register_next_step_handler(msg, process_phone_step)
    else:
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main_menu(),
        )


def process_phone_step(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user_id = message.from_user.id
    phone = message.text.strip()

    if not is_valid_phone(phone):
        msg = bot.send_message(
            message.chat.id,
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7..., +82..., +1...).",
        )
        bot.register_next_step_handler(msg, process_phone_step)  # –ü–æ–≤—Ç–æ—Ä –≤–≤–æ–¥–∞
        return

    if user_id in user_data:
        user_data[user_id]["phone"] = phone
        user_data[user_id]["step"] = "waiting_budget"

        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç (–≤ —Ä—É–±–ª—è—Ö):")
        bot.register_next_step_handler(msg, process_budget_step)
    else:
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main_menu(),
        )


def process_budget_step(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞"""
    user_id = message.from_user.id
    if user_id in user_data:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
            budget = float(message.text.replace(" ", "").replace(",", "."))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—é–¥–∂–µ—Ç
            user_data[user_id]["budget"] = budget
            user_data[user_id]["step"] = "waiting_car_link"

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å
            msg = bot.send_message(
                message.chat.id,
                "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç':",
            )
            bot.register_next_step_handler(msg, process_car_link_step)
        except ValueError:
            # –ï—Å–ª–∏ –±—é–¥–∂–µ—Ç –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
            msg = bot.send_message(
                message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):"
            )
            bot.register_next_step_handler(msg, process_budget_step)
    else:
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main_menu(),
        )


def process_car_link_step(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å"""
    user_id = message.from_user.id
    if user_id in user_data:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        name = user_data[user_id]["name"]
        phone = user_data[user_id]["phone"]
        budget = user_data[user_id]["budget"]
        car_link = message.text

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
        processing_msg = bot.send_message(
            message.chat.id, "‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—à—É –∑–∞—è–≤–∫—É... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )

        # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É –≤ amoCRM
        try:
            if create_amocrm_lead(name, phone, budget, car_link):
                # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
                bot.edit_message_text(
                    "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
                    message.chat.id,
                    processing_msg.message_id,
                )

                success_msg = (
                    f"–°–ø–∞—Å–∏–±–æ, {name}!\n\n"
                    f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n"
                    f"üìû –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n\n"
                    f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é:\n"
                    f"üá∞üá∑ +82 10 2382 4808 (https://wa.me/821023824808) ¬´–ê–ª–µ–∫—Å–∞–Ω–¥—Ä¬ª\n"
                    f"üá∞üá∑ +82 10 7928 8398 (https://wa.me/821079288398) ¬´–°–µ—Ä–≥–µ–π¬ª\n"
                    f"üá∞üá∑ +82 10 2235 4808 (https://wa.me/821022354808) ¬´–ê–ª–µ–∫—Å–∞–Ω–¥—Ä¬ª"
                )
                bot.send_message(message.chat.id, success_msg, reply_markup=main_menu())
            else:
                # –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏
                bot.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.",
                    message.chat.id,
                    processing_msg.message_id,
                )

                error_msg = (
                    f"–ò–∑–≤–∏–Ω–∏—Ç–µ, {name}, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É.\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é:"
                )
                bot.send_message(message.chat.id, error_msg, reply_markup=main_menu())
                logging.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è user_id={user_id}, name={name}"
                )
        except Exception as e:
            logging.exception(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –≤ amoCRM"
            )  # –≤—ã–≤–æ–¥–∏—Ç traceback
            print_message(f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}")
            return False

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del user_data[user_id]
    else:
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main_menu(),
        )


def format_phone(phone):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —É–¥–∞–ª—è—è –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    –∏ –¥–æ–±–∞–≤–ª—è—è +7 –≤ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    """
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    clean_phone = re.sub(r"\D", "", phone)

    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8 –∏–ª–∏ 7, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ +7
    if clean_phone.startswith("8") and len(clean_phone) == 11:
        clean_phone = "7" + clean_phone[1:]

    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º +7
    if len(clean_phone) == 10:
        clean_phone = "7" + clean_phone

    # –î–æ–±–∞–≤–ª—è–µ–º +
    if not clean_phone.startswith("+"):
        clean_phone = "+" + clean_phone

    logging.info(f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone} -> {clean_phone}")
    return clean_phone


def create_amocrm_lead(name, phone, budget, car_link=None):
    import os
    import requests
    import json
    import logging
    from os.path import exists

    logging.info(
        f"–°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É: –∏–º—è={name}, —Ç–µ–ª–µ—Ñ–æ–Ω={phone}, –±—é–¥–∂–µ—Ç={budget}, —Å—Å—ã–ª–∫–∞={car_link}"
    )

    try:
        price = int(float(budget))
    except (ValueError, TypeError):
        price = 0

    formatted_phone = format_phone(phone)

    access_token = os.getenv("AMOCRM_ACCESS_TOKEN")
    refresh_token = os.getenv("AMOCRM_REFRESH_TOKEN")

    # if exists("access_token.txt"):
    #     with open("access_token.txt", "r") as f:
    #         access_token = f.read().strip()
    # if exists("refresh_token.txt"):
    #     with open("refresh_token.txt", "r") as f:
    #         refresh_token = f.read().strip()

    if not access_token or not refresh_token:
        logging.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞ –∫ AmoCRM")
        return False

    subdomain = os.getenv("AMOCRM_SUBDOMAIN")
    client_id = os.getenv("AMOCRM_CLIENT_ID")
    client_secret = os.getenv("AMOCRM_CLIENT_SECRET")
    redirect_url = os.getenv("AMOCRM_REDIRECT_URL")
    base_url = f"https://{subdomain}.amocrm.ru/api/v4"

    def refresh_access_token():
        nonlocal access_token, refresh_token
        token_url = f"https://{subdomain}.amocrm.ru/oauth2/access_token"
        data = {
            "client_id": client_id,
            "client_secret": client_secret,
            "grant_type": "refresh_token",
            "refresh_token": refresh_token,
            "redirect_uri": redirect_url,
        }
        res = requests.post(token_url, json=data)
        if res.status_code == 200:
            result = res.json()
            access_token = result.get("access_token")
            refresh_token = result.get("refresh_token")
            with open("access_token.txt", "w") as f:
                f.write(access_token)
            with open("refresh_token.txt", "w") as f:
                f.write(refresh_token)
            return True
        else:
            logging.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {res.status_code}, {res.text}"
            )
            return False

    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json",
    }

    # --- –®–∞–≥ 1: —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ ---
    contact_data = [
        {
            "name": name,
            "responsible_user_id": 12208190,
            "custom_fields_values": [
                {
                    "field_code": "PHONE",
                    "values": [
                        {
                            "value": formatted_phone,
                            "enum_code": "WORK",  # –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ "MOB" –∏–ª–∏ "WORK"
                        }
                    ],
                }
            ],
        }
    ]

    contacts_url = f"{base_url}/contacts"
    contact_response = requests.post(contacts_url, headers=headers, json=contact_data)

    if contact_response.status_code == 401 and refresh_access_token():
        headers["Authorization"] = f"Bearer {access_token}"
        contact_response = requests.post(
            contacts_url, headers=headers, json=contact_data
        )

    if contact_response.status_code >= 400:
        logging.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {contact_response.status_code}, {contact_response.text}"
        )
        return False

    contact_id = contact_response.json().get("id")
    if not contact_id:
        contact_id = (
            contact_response.json()
            .get("_embedded", {})
            .get("contacts", [{}])[0]
            .get("id")
        )
    if not contact_id:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–æ–Ω—Ç–∞–∫—Ç–∞")
        return False

    logging.info(f"–ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID: {contact_id}")

    # --- –®–∞–≥ 2: —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ ---
    custom_fields = [{"field_id": 1069807, "values": [{"value": price}]}]
    if car_link and car_link.lower() != "–Ω–µ—Ç":
        custom_fields.append({"field_id": 1295963, "values": [{"value": car_link}]})

    lead_data = [
        {
            "name": f"–ó–∞—è–≤–∫–∞ –æ—Ç {name}",
            "price": price,
            "_embedded": {
                "contacts": [{"id": contact_id}],
                "tags": [{"name": "telegram_bot"}],
            },
        }
    ]

    leads_url = f"{base_url}/leads"
    lead_response = requests.post(leads_url, headers=headers, json=lead_data)

    if lead_response.status_code == 401 and refresh_access_token():
        headers["Authorization"] = f"Bearer {access_token}"
        lead_response = requests.post(leads_url, headers=headers, json=lead_data)

    if lead_response.status_code >= 400:
        logging.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {lead_response.status_code}, {lead_response.text}"
        )
        return False

    lead_id = lead_response.json().get("id")
    if not lead_id:
        lead_id = (
            lead_response.json().get("_embedded", {}).get("leads", [{}])[0].get("id")
        )

    if not lead_id:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–¥–µ–ª–∫–∏")
        return False

    logging.info(f"–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {lead_id}")

    # --- –®–∞–≥ 3: –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ ---
    notes_url = f"{base_url}/leads/notes"
    if car_link and car_link.lower() != "–Ω–µ—Ç":
        note_text = f"–ó–∞—è–≤–∫–∞ –∏–∑ Telegram\n–§–ò–û: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {formatted_phone}\n–ë—é–¥–∂–µ—Ç: {price}‚ÇΩ\n–°—Å—ã–ª–∫–∞: {car_link}"
    else:
        note_text = f"–ó–∞—è–≤–∫–∞ –∏–∑ Telegram\n–§–ò–û: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {formatted_phone}\n–ë—é–¥–∂–µ—Ç: {price}‚ÇΩ"

    note_data = [
        {"entity_id": lead_id, "note_type": "common", "params": {"text": note_text}}
    ]

    note_response = requests.post(notes_url, headers=headers, json=note_data)

    if note_response.status_code == 401 and refresh_access_token():
        headers["Authorization"] = f"Bearer {access_token}"
        note_response = requests.post(notes_url, headers=headers, json=note_data)

    if note_response.status_code >= 400:
        logging.warning(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è: {note_response.status_code}, {note_response.text}"
        )
    else:
        logging.info("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")

    print_message(f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ amoCRM (ID —Å–¥–µ–ª–∫–∏: {lead_id})")
    return True


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞
def start_manual_calculation(chat_id):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä—É—á–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞"""
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–î–æ 3 –ª–µ—Ç", callback_data="manual_age_0-3"),
        types.InlineKeyboardButton("–û—Ç 3 –¥–æ 5 –ª–µ—Ç", callback_data="manual_age_3-5"),
        types.InlineKeyboardButton("–û—Ç 5 –¥–æ 7 –ª–µ—Ç", callback_data="manual_age_5-7"),
        types.InlineKeyboardButton("–û—Ç 7 –ª–µ—Ç", callback_data="manual_age_7-0"),
    )

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=markup)


def process_manual_engine_volume(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–±—ä—ë–º–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è –ø—Ä–∏ —Ä—É—á–Ω–æ–º —Ä–∞—Å—á—ë—Ç–µ"""
    try:
        engine_volume = int(message.text.strip())
        user_id = message.from_user.id

        if user_id in user_data and "manual_age" in user_data[user_id]:
            user_data[user_id]["engine_volume"] = engine_volume

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            msg = bot.send_message(
                message.chat.id,
                "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –∫–æ—Ä–µ–π—Å–∫–∏—Ö –≤–æ–Ω–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20000000):",
            )
            bot.register_next_step_handler(msg, process_manual_car_price)
        else:
            bot.send_message(
                message.chat.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Ä—É—á–Ω–æ–π —Ä–∞—Å—á—ë—Ç –∑–∞–Ω–æ–≤–æ.",
                reply_markup=main_menu(),
            )
    except ValueError:
        msg = bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—ä—ë–º–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è:",
        )
        bot.register_next_step_handler(msg, process_manual_engine_volume)


def process_manual_car_price(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø—Ä–∏ —Ä—É—á–Ω–æ–º —Ä–∞—Å—á—ë—Ç–µ"""
    try:
        car_price = int(message.text.strip())
        user_id = message.from_user.id

        if (
            user_id in user_data
            and "manual_age" in user_data[user_id]
            and "engine_volume" in user_data[user_id]
        ):
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á—ë—Ç
            calculate_manual_cost(
                user_data[user_id]["manual_age"],
                user_data[user_id]["engine_volume"],
                car_price,
                message,
            )
        else:
            bot.send_message(
                message.chat.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Ä—É—á–Ω–æ–π —Ä–∞—Å—á—ë—Ç –∑–∞–Ω–æ–≤–æ.",
                reply_markup=main_menu(),
            )
    except ValueError:
        msg = bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:",
        )
        bot.register_next_step_handler(msg, process_manual_car_price)


def calculate_manual_cost(age, engine_volume, car_price, message):
    """–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –≤—Ä—É—á–Ω—É—é –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
    global car_data, usdt_krw_rate, usdt_rub_rate

    print_message("–ó–ê–ü–†–û–° –ù–ê –†–£–ß–ù–û–ô –†–ê–°–ß–Å–¢ –ê–í–¢–û–ú–û–ë–ò–õ–Ø")

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç
    get_usdt_to_rub_rate()
    get_currency_rates()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∏–¥—ë—Ç —Ä–∞—Å—á—ë—Ç
    processing_message = bot.send_message(
        message.chat.id, "–í—ã–ø–æ–ª–Ω—è—é —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚è≥"
    )

    try:
        # –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        age_formatted_map = {
            "0-3": "–¥–æ 3 –ª–µ—Ç",
            "3-5": "–æ—Ç 3 –¥–æ 5 –ª–µ—Ç",
            "5-7": "–æ—Ç 5 –¥–æ 7 –ª–µ—Ç",
            "7-0": "–æ—Ç 7 –ª–µ—Ç",
        }
        age_formatted = age_formatted_map.get(age, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç")

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—ë–º–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        engine_volume_formatted = f"{format_number(engine_volume)} cc"

        # –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ —Ä—É–±–ª—è—Ö
        price_krw = car_price
        price_usdt = int(price_krw) / usdt_krw_rate
        price_rub = int(price_usdt) * usdt_rub_rate

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–º–æ–∂–µ–Ω–Ω—ã–µ —Å–±–æ—Ä—ã
        from utils import get_customs_fees_manual

        logging.info(
            f"–ó–∞–ø—Ä–æ—Å —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö —Å–±–æ—Ä–æ–≤: –æ–±—ä–µ–º={engine_volume}, —Ü–µ–Ω–∞={car_price}, –≤–æ–∑—Ä–∞—Å—Ç={age}"
        )
        response = get_customs_fees_manual(engine_volume, price_krw, age, engine_type=1)
        logging.info(f"–û—Ç–≤–µ—Ç calcus.ru: {response}")

        # –¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä
        customs_fee = clean_number(response["sbor"])
        customs_duty = clean_number(response["tax"])
        recycling_fee = clean_number(response["util"])

        # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ä—É–±–ª—è—Ö
        total_cost = (
            price_rub  # –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ä—É–±–ª—è—Ö
            + customs_fee  # –¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä
            + customs_duty  # –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞
            + recycling_fee  # –£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä
            + 100000  # –§–†–ê–•–¢
            + 100000  # –ë—Ä–æ–∫–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏
        )

        car_data["freight_rub"] = 100000
        car_data["freight_usdt"] = 1000

        car_data["broker_rub"] = 100000
        car_data["broker_usdt"] = 100000 / usdt_rub_rate

        car_data["customs_fee_rub"] = customs_fee
        car_data["customs_fee_usdt"] = customs_fee / usdt_rub_rate

        car_data["customs_duty_rub"] = customs_duty
        car_data["customs_duty_usdt"] = customs_duty / usdt_rub_rate

        car_data["util_fee_rub"] = recycling_fee
        car_data["util_fee_usdt"] = recycling_fee / usdt_rub_rate

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_message = (
            f"üöó <b>–†—É—á–Ω–æ–π —Ä–∞—Å—á—ë—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è</b>\n\n"
            f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {age_formatted}\n"
            f"üîß –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {engine_volume_formatted}\n\n"
            f"üí± –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç:\nUSDT/KRW: <b>‚Ç©{usdt_krw_rate:.2f}</b>\nUSDT/RUB: <b>{usdt_rub_rate:.2f} ‚ÇΩ</b>\n\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b>\n"
            f"‚Ä¢ –¶–µ–Ω–∞ –∞–≤—Ç–æ:\n‚Ç©<b>{format_number(price_krw)}</b> | <b>{format_number(price_rub)}</b> ‚ÇΩ\n\n"
            f"‚Ä¢ –§–†–ê–•–¢:\n<b>{format_number(car_data['freight_rub'])}</b> ‚ÇΩ\n\n"
            f"‚Ä¢ –ë—Ä–æ–∫–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏:\n<b>{format_number(car_data['broker_rub'])}</b> ‚ÇΩ\n\n"
            f"üìù <b>–¢–∞–º–æ–∂–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:</b>\n"
            f"‚Ä¢ –¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä:\n<b>{format_number(car_data['customs_fee_rub'])}</b> ‚ÇΩ\n\n"
            f"‚Ä¢ –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞:\n<b>{format_number(car_data['customs_duty_rub'])}</b> ‚ÇΩ\n\n"
            f"‚Ä¢ –£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä:\n<b>{format_number(car_data['util_fee_rub'])}</b> ‚ÇΩ\n\n"
            f"üíµ <b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥ –∫–ª—é—á –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞:</b>\n"
            f"<b>{format_number(total_cost)} ‚ÇΩ</b>\n\n"
            f"üë®‚Äçüíº üá∞üá∑ +82 10 2382 4808 <a href='https://wa.me/821023824808'>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä</a>\n"
            f"üë®‚Äçüíº üá∞üá∑ +82 10 7928 8398 <a href='https://wa.me/821079288398'>–°–µ—Ä–≥–µ–π</a>\n"
            f"üë®‚Äçüíº üá∞üá∑ +82 10 2235 4808 <a href='https://wa.me/821022354808'>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä</a>\n"
            f"üì¢ <a href='https://t.me/mdmgroupkorea'>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª</a>\n"
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
                callback_data="add_crm_deal",
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "–ù–æ–≤—ã–π —Ä—É—á–Ω–æ–π —Ä–∞—Å—á—ë—Ç",
                callback_data="manual_calculation",
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "–†–∞—Å—á—ë—Ç –ø–æ —Å—Å—ã–ª–∫–µ",
                callback_data="calculate_another",
            )
        )

        bot.send_message(
            message.chat.id,
            result_message,
            parse_mode="HTML",
            reply_markup=keyboard,
        )

    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_menu(),
        )

    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞—Å—á—ë—Ç–∞
        bot.delete_message(message.chat.id, processing_message.message_id)


# Run the bot
if __name__ == "__main__":
    set_bot_commands()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∫–∞–∂–¥—ã–π —á–∞—Å
    import threading
    import time

    def update_currency_rates():
        while True:
            try:
                get_currency_rates()
                print_message("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                time.sleep(3600)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å (3600 —Å–µ–∫—É–Ω–¥)
            except Exception as e:
                print_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
                time.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    currency_thread = threading.Thread(target=update_currency_rates, daemon=True)
    currency_thread.start()

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    get_currency_rates()
    bot.polling(non_stop=True)
